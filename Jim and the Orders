import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static List<Integer> jimOrders(List<List<Integer>> orders) {
        List<List<Integer>> customerDeliveryInfo = new ArrayList<>();
        for (int i = 0; i < orders.size(); i++) {
            int orderNumber = orders.get(i).get(0);
            int prepTime = orders.get(i).get(1);
            int deliveryTime = orderNumber + prepTime;
            customerDeliveryInfo.add(Arrays.asList(deliveryTime, i + 1)); 
        }
        Collections.sort(customerDeliveryInfo, Comparator.comparing((List<Integer> info) -> info.get(0))
                .thenComparing(info -> info.get(1))); 
        return customerDeliveryInfo.stream()
                .map(info -> info.get(1)) 
                .collect(toList());
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> orders = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                orders.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<Integer> result = Result.jimOrders(orders);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
